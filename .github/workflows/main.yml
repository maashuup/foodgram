name: Main Foodgram workflow

on:
  push:
    branches:
      - main

jobs:
# 1. Проверка кода линтерами
  linters:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.txt
      - name: Run flake8
        run: python -m flake8 backend/

  # 2. Тесты Django
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      db:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          # POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
          # POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASS }}
          # POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      # # Этот шаг дополним переменными для доступа к БД
      # - name: Run Django tests
      #   # Добавляем env-переменные для доступа к БД
      #   env:
      #     # POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
      #     # POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASS }}
      #     # POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
      #     POSTGRES_USER: django_user
      #     POSTGRES_PASSWORD: django_password
      #     POSTGRES_DB: django_db
      #     # Сервер БД запущен в Docker, но его порт проброшен на хост
      #     # Поэтому подключаемся к 127.0.0.1:5432
      #     DB_HOST: 127.0.0.1
      #     DB_PORT: 5432
      #   run: pytest # ???????????????????????????????????????????????????????


# 3. Сборка и публикация backend образа
  build_and_push_backend:
    name: Build and push backend image
    runs-on: ubuntu-latest
    needs: linters
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:sha-${{ github.sha }}

  # 4. Сборка и публикация frontend образа
  build_and_push_frontend:
    name: Build and push frontend image
    runs-on: ubuntu-latest
    needs: linters
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:sha-${{ github.sha }}

  # # 5. Сборка и публикация nginx образа
  # build_and_push_nginx:
  #   name: Build and push nginx image
  #   runs-on: ubuntu-latest
  #   needs: linters
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build and push nginx image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./infra
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest
  #           ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:sha-${{ github.sha }}

  # 5. Деплой на сервер через SSH
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend
      - build_and_push_frontend
      # - build_and_push_nginx
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            echo "Очищаются старые Docker-образы..."
            sudo docker image prune -f
            echo "Выполняется pull свежих образов с Docker Hub..."
            sudo docker compose -f docker-compose.production.yml pull
            echo "Остановка старых контейнеров..."
            sudo docker compose -f docker-compose.production.yml down
            echo "Запуск новых контейнеров..."
            sudo docker compose -f docker-compose.production.yml up -d
            echo "Выполнение миграций..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate --noinput
            echo "Сбор статики Django..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput

            # echo "Устанавливает корректные права на статику..."
            # sudo docker compose -f docker-compose.production.yml exec backend chmod -R 777 /usr/share/nginx/html/static/

            echo "Перезапускается Nginx..."
            sudo docker compose -f docker-compose.production.yml restart nginx

  # 6. Отправка уведомления в Telegram
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Деплой Foodgram успешно выполнен!"
